// Copyright (C) 2019-2023, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/message (interfaces: InboundMessage,OutboundMessage)

// Package message is a generated GoMock package.
package message

import (
	reflect "reflect"
	time "time"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
)

// MockInboundMessage is a mock of InboundMessage interface.
type MockInboundMessage struct {
	ctrl     *gomock.Controller
	recorder *MockInboundMessageMockRecorder
}

// MockInboundMessageMockRecorder is the mock recorder for MockInboundMessage.
type MockInboundMessageMockRecorder struct {
	mock *MockInboundMessage
}

// NewMockInboundMessage creates a new mock instance.
func NewMockInboundMessage(ctrl *gomock.Controller) *MockInboundMessage {
	mock := &MockInboundMessage{ctrl: ctrl}
	mock.recorder = &MockInboundMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInboundMessage) EXPECT() *MockInboundMessageMockRecorder {
	return m.recorder
}

// BytesSavedCompression mocks base method.
func (m *MockInboundMessage) BytesSavedCompression() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesSavedCompression")
	ret0, _ := ret[0].(int)
	return ret0
}

// BytesSavedCompression indicates an expected call of BytesSavedCompression.
func (mr *MockInboundMessageMockRecorder) BytesSavedCompression() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesSavedCompression", reflect.TypeOf((*MockInboundMessage)(nil).BytesSavedCompression))
}

// Expiration mocks base method.
func (m *MockInboundMessage) Expiration() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expiration")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Expiration indicates an expected call of Expiration.
func (mr *MockInboundMessageMockRecorder) Expiration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expiration", reflect.TypeOf((*MockInboundMessage)(nil).Expiration))
}

// Message mocks base method.
func (m *MockInboundMessage) Message() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockInboundMessageMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockInboundMessage)(nil).Message))
}

// NodeID mocks base method.
func (m *MockInboundMessage) NodeID() ids.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(ids.NodeID)
	return ret0
}

// NodeID indicates an expected call of NodeID.
func (mr *MockInboundMessageMockRecorder) NodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*MockInboundMessage)(nil).NodeID))
}

// OnFinishedHandling mocks base method.
func (m *MockInboundMessage) OnFinishedHandling() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnFinishedHandling")
}

// OnFinishedHandling indicates an expected call of OnFinishedHandling.
func (mr *MockInboundMessageMockRecorder) OnFinishedHandling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFinishedHandling", reflect.TypeOf((*MockInboundMessage)(nil).OnFinishedHandling))
}

// Op mocks base method.
func (m *MockInboundMessage) Op() Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Op")
	ret0, _ := ret[0].(Op)
	return ret0
}

// Op indicates an expected call of Op.
func (mr *MockInboundMessageMockRecorder) Op() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Op", reflect.TypeOf((*MockInboundMessage)(nil).Op))
}

// MockOutboundMessage is a mock of OutboundMessage interface.
type MockOutboundMessage struct {
	ctrl     *gomock.Controller
	recorder *MockOutboundMessageMockRecorder
}

// MockOutboundMessageMockRecorder is the mock recorder for MockOutboundMessage.
type MockOutboundMessageMockRecorder struct {
	mock *MockOutboundMessage
}

// NewMockOutboundMessage creates a new mock instance.
func NewMockOutboundMessage(ctrl *gomock.Controller) *MockOutboundMessage {
	mock := &MockOutboundMessage{ctrl: ctrl}
	mock.recorder = &MockOutboundMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboundMessage) EXPECT() *MockOutboundMessageMockRecorder {
	return m.recorder
}

// BypassThrottling mocks base method.
func (m *MockOutboundMessage) BypassThrottling() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BypassThrottling")
	ret0, _ := ret[0].(bool)
	return ret0
}

// BypassThrottling indicates an expected call of BypassThrottling.
func (mr *MockOutboundMessageMockRecorder) BypassThrottling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BypassThrottling", reflect.TypeOf((*MockOutboundMessage)(nil).BypassThrottling))
}

// Bytes mocks base method.
func (m *MockOutboundMessage) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockOutboundMessageMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockOutboundMessage)(nil).Bytes))
}

// BytesSavedCompression mocks base method.
func (m *MockOutboundMessage) BytesSavedCompression() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesSavedCompression")
	ret0, _ := ret[0].(int)
	return ret0
}

// BytesSavedCompression indicates an expected call of BytesSavedCompression.
func (mr *MockOutboundMessageMockRecorder) BytesSavedCompression() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesSavedCompression", reflect.TypeOf((*MockOutboundMessage)(nil).BytesSavedCompression))
}

// Op mocks base method.
func (m *MockOutboundMessage) Op() Op {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Op")
	ret0, _ := ret[0].(Op)
	return ret0
}

// Op indicates an expected call of Op.
func (mr *MockOutboundMessageMockRecorder) Op() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Op", reflect.TypeOf((*MockOutboundMessage)(nil).Op))
}
