// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/wallet/chain/x (interfaces: BuilderBackend)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=wallet/chain/x/mocks/mock_builder_backend.go github.com/ava-labs/avalanchego/wallet/chain/x BuilderBackend
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	avax "github.com/ava-labs/avalanchego/vms/components/avax"
	gomock "go.uber.org/mock/gomock"
)

// MockBuilderBackend is a mock of BuilderBackend interface.
type MockBuilderBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderBackendMockRecorder
}

// MockBuilderBackendMockRecorder is the mock recorder for MockBuilderBackend.
type MockBuilderBackendMockRecorder struct {
	mock *MockBuilderBackend
}

// NewMockBuilderBackend creates a new mock instance.
func NewMockBuilderBackend(ctrl *gomock.Controller) *MockBuilderBackend {
	mock := &MockBuilderBackend{ctrl: ctrl}
	mock.recorder = &MockBuilderBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderBackend) EXPECT() *MockBuilderBackendMockRecorder {
	return m.recorder
}

// AVAXAssetID mocks base method.
func (m *MockBuilderBackend) AVAXAssetID() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AVAXAssetID")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// AVAXAssetID indicates an expected call of AVAXAssetID.
func (mr *MockBuilderBackendMockRecorder) AVAXAssetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AVAXAssetID", reflect.TypeOf((*MockBuilderBackend)(nil).AVAXAssetID))
}

// BaseTxFee mocks base method.
func (m *MockBuilderBackend) BaseTxFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseTxFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// BaseTxFee indicates an expected call of BaseTxFee.
func (mr *MockBuilderBackendMockRecorder) BaseTxFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseTxFee", reflect.TypeOf((*MockBuilderBackend)(nil).BaseTxFee))
}

// BlockchainID mocks base method.
func (m *MockBuilderBackend) BlockchainID() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockchainID")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// BlockchainID indicates an expected call of BlockchainID.
func (mr *MockBuilderBackendMockRecorder) BlockchainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockchainID", reflect.TypeOf((*MockBuilderBackend)(nil).BlockchainID))
}

// CreateAssetTxFee mocks base method.
func (m *MockBuilderBackend) CreateAssetTxFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetTxFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// CreateAssetTxFee indicates an expected call of CreateAssetTxFee.
func (mr *MockBuilderBackendMockRecorder) CreateAssetTxFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetTxFee", reflect.TypeOf((*MockBuilderBackend)(nil).CreateAssetTxFee))
}

// NetworkID mocks base method.
func (m *MockBuilderBackend) NetworkID() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkID")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// NetworkID indicates an expected call of NetworkID.
func (mr *MockBuilderBackendMockRecorder) NetworkID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkID", reflect.TypeOf((*MockBuilderBackend)(nil).NetworkID))
}

// UTXOs mocks base method.
func (m *MockBuilderBackend) UTXOs(arg0 context.Context, arg1 ids.ID) ([]*avax.UTXO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UTXOs", arg0, arg1)
	ret0, _ := ret[0].([]*avax.UTXO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UTXOs indicates an expected call of UTXOs.
func (mr *MockBuilderBackendMockRecorder) UTXOs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UTXOs", reflect.TypeOf((*MockBuilderBackend)(nil).UTXOs), arg0, arg1)
}
