// Copyright (C) 2019-2022, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/network/peer (interfaces: IPSigner)

// Package peer is a generated GoMock package.
package peer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPSigner is a mock of IPSigner interface.
type MockIPSigner struct {
	ctrl     *gomock.Controller
	recorder *MockIPSignerMockRecorder
}

// MockIPSignerMockRecorder is the mock recorder for MockIPSigner.
type MockIPSignerMockRecorder struct {
	mock *MockIPSigner
}

// NewMockIPSigner creates a new mock instance.
func NewMockIPSigner(ctrl *gomock.Controller) *MockIPSigner {
	mock := &MockIPSigner{ctrl: ctrl}
	mock.recorder = &MockIPSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPSigner) EXPECT() *MockIPSignerMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockIPSigner) Sign(arg0 []byte, arg1 Signature) (Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].(Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockIPSignerMockRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockIPSigner)(nil).Sign), arg0, arg1)
}
